#!/usr/bin/env bash
# ^^^ for syntax checking in the editor only

case "$1" in
	--no-ssh-mx)
		local NO_SSH_MX=$1
		shift
	;;
	--one-ssh-mx)
		local ONE_SSH_MX=$1
		shift
	;;
	--intern-ssh-mx-root-temp-block)
		# make a socket-dir and ensure it‚Äôs cleaned up
		echo 'if [ -n "$MMDAPP" ] && [ -d "$MMDAPP/.local" ]; then'
		echo '  mkdir -p "$MMDAPP/.local/temp"'
		echo '  tmpdir=$(mktemp -d "$MMDAPP/.local/temp/sshmux-XXXXX")'
		echo 'else'
				# fallback into system temp: TMPDIR on macOS, /tmp elsewhere
		echo '  tmpdir=$(mktemp -d "${TMPDIR:-/tmp}/ssh-control-masters-XXXXXX")'
		echo 'fi'

		echo "trap 'rm -rf \"\$tmpdir\" ; popd' EXIT"
		echo 'pushd "$tmpdir" >/dev/null || exit 1'

		return 0
	;;
	--intern-stdin-parallel-block)
		printf '( %s | %s ) <<XARGS_INPUT\n' \
			"tr '\n' '\0'" \
			"xargs -0 -P '$parallelLimit' -I% -- sh -c 'myx.common lib/prefix -3 %'"
		
		# awk '$0 !~ /^$|^[ \t]+$|^#|^[ \t]+#/ { print $0; }' | \
		local itemTarget itemSource useBranch
		while read -r itemTarget itemSource useBranch _; do
			# ${syncType} - cloneSync clonePull
			echo myx.common "$syncCommandName" "$itemTarget" "$itemSource" "$useBranch"
		done
		
		printf 'XARGS_INPUT\n\n'
		return 0
	;;
	--intern-stdin-sequence-block)
		# awk '$0 !~ /^$|^[ \t]+$|^#|^[ \t]+#/ { print $0; }' | \
		local itemTarget itemSource useBranch
		printf '%s\n' "$REPO_LIST" \
		| while read -r itemTarget itemSource useBranch _; do
			# ${syncType} - GitCloneSync GitClonePull
			echo Prefix -2 GitClone${syncType} "$itemTarget" "$itemSource" "$useBranch"
		done
		return 0
	;;
	--intern-stdin-portable-block)
		# awk '$0 !~ /^$|^[ \t]+$|^#|^[ \t]+#/ { print $0; }' | \
		local itemTarget itemSource useBranch rowCounter
		printf '%s\n' "$REPO_LIST" \
		| while read -r itemTarget itemSource useBranch _; do
			# ${syncType} - GitCloneSync GitClonePull
			echo Async -2 GitClone${syncType} "$itemTarget" "$itemSource" "$useBranch"
			rowCounter="${rowCounter}@"
			if [ "$rowCounter" = "@@@@@@@@" ] ; then
				echo wait
				rowCounter=""
			fi
		done
		echo wait
		return 0
	;;
esac

local syncType
case "$useStage" in
	*-pull) # gitClonePull | GitClonePull
		syncType="Pull"
	;;
	*-push) # gitCloneSync | GitCloneSync
		syncType="Sync"
	;;
	*)
		echo "‚õî ERROR: $MDSC_CMD: invalid build stage ($useStage) ($MDSC_OPTION, $@)" >&2
		set +e ; return 1
	;;
esac

local syncMode="${1:---parallel}"
local syncCommandPath=""
local syncCommandName=""

[ "$syncType" != "Pull" ] || [ "$syncMode" == "--portable" ] || {
	case "$useStage" in
		source-*)
			case "$MDSC_INMODE" in
				source) syncType=Sync ;;
			esac
		;;
	esac
}


if \
[ -x "$MDLT_ORIGIN/myx/myx.common/os-myx.common/host/tarball/share/myx.common/bin/git/clone${syncType}" ] ; then
	syncCommandPath="$MDLT_ORIGIN/myx/myx.common/os-myx.common/host/tarball/share/myx.common/bin"
	syncCommandName="git/clone${syncType}"
elif \
[ "$( which myx.common )" != "" ] ; then
	syncCommandPath="$( dirname "$( dirname "$( myx.common which git/clone${syncType} )" )" )"
	syncCommandName="git/clone${syncType}"
	if [ ! -x "$syncCommandPath/$syncCommandName" ] ; then
		echo "‚õî ERROR: $MDSC_CMD: myx.common which git/clone${syncType} failed ($MDSC_OPTION, $@)" >&2
		set +e ; return 1
	fi
else
	echo "‚õî ERROR: $MDSC_CMD: can't locate myx.common ($useStage) ($MDSC_OPTION, $@)" >&2
	set +e ; return 1
fi

local parallelLimit

case "$syncMode" in
	--sequence|--obsolete)
		parallelLimit=1
	;;
	--parallel)
		parallelLimit=${2:-8}
	;;
	--portable)
		parallelLimit=8
	;;
	*)
		echo "‚õî ERROR: $MDSC_CMD: invalid sync mode: $syncMode ($MDSC_OPTION, $@)" >&2
		set +e ; return 1
	;;
esac

local REPO_LIST; REPO_LIST="$(DistroImageSync --intern-print-repo-list-from-stdin)"

if [ -z "$REPO_LIST" ] ; then
	echo "‚õî ERROR: $MDSC_CMD: empty repo list:" >&2
	set +e ; return 1
fi

echo 'set -e' 
printf 'export MMDAPP="${MMDAPP:-%s}"\n' "$MMDAPP"
echo 'mkdir -p "$MMDAPP/source"'
echo 'cd "$MMDAPP/source"'
echo

# 1) Common SSH flags (cipher-suite, KEX, hostkeys, compression, batching‚Ä¶)
echo 'export SSH_COMMON_OPTS=" -4 -T -q \'
echo '  -o BatchMode=yes \'
echo '  -o Ciphers=chacha20-poly1305@openssh.com,aes128-gcm@openssh.com,aes256-gcm@openssh.com \'
echo '  -o KexAlgorithms=curve25519-sha256 \'
echo '  -o HostKeyAlgorithms=ssh-ed25519,ecdsa-sha2-nistp256,ssh-rsa \'
echo '  -o Compression=yes \'
echo '"'

# embed functions (xargs from --parallel doesn't support functions)
case "$syncMode" in
	--sequence|--obsolete|--portable)
		echo 
		echo '# üìö lib/sedLineReader'
		echo 
		grep -v -e '^[[:space:]]*$' -e '^[[:space:]]*#' "$syncCommandPath/lib/sedLineReader"
		echo 
		echo '# üìö lib/prefix'
		echo 
		grep -v -e '^[[:space:]]*$' -e '^[[:space:]]*#' "$syncCommandPath/lib/prefix"
		echo 
		echo '# üìö lib/async'
		echo 
		grep -v -e '^[[:space:]]*$' -e '^[[:space:]]*#' "$syncCommandPath/lib/async"
		echo 
		echo "# üìò $syncCommandName"
		echo 
		grep -v -e '^[[:space:]]*$' -e '^[[:space:]]*#' "$syncCommandPath/$syncCommandName"
		echo 
		echo '# üßæ Image Sync main block'
		echo 
	;;
esac

local SSH_REPO_LIST=$( printf '%s\n' "$REPO_LIST" | awk '$2 !~ /^https?:\/\// { print $0 }' )
local SSH_USE_ROOT_MX SSH_ROOT_MX_USED SSH_NEED_WAIT	

# ‚îÄ‚îÄ‚îÄ configure SSH for multiplexing via this temp dir ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if [ -z "$NO_SSH_MX" ] && [ "$(printf '%s\n' "$SSH_REPO_LIST" | wc -l)" -gt 2 ] ; then

	local MX_SSH_REPO_LIST=$(
		printf '%s\n' "$SSH_REPO_LIST" \
		| while read itemTarget url rest; do
			# extract ‚Äúhost port‚Äù from $url
			printf '%s\n' "$url" \
			| sed -nE 's#^(ssh://)?([^@]+@)?([^:/]+)(:([0-9]+))?.*#\3 \5#p' \
			| while read -r SSH_HOST SSH_PORT ; do
				echo "$SSH_HOST ${SSH_PORT:-22} $itemTarget $url $rest"
			done
		done
	)

	while read -r SSH_HOST SSH_PORT ; do
		local SERVER_REPO_LIST=$(
			echo "$MX_SSH_REPO_LIST" | grep -e "^$SSH_HOST $SSH_PORT " | cut -d' ' -f3-
		)

		# one master per 4 repos, capped at 8
		local SERVER_REPOS=$(printf '%s\n' "$SERVER_REPO_LIST" | wc -l)
		local MASTER_COUNT=$(( ( $SERVER_REPOS + 5) / 6 )) ; [ "$MASTER_COUNT" -gt 8 ] && MASTER_COUNT=8

		if [ "$MASTER_COUNT" = 1 ] || [ -n "$ONE_SSH_MX" ] ; then
			if [ "$SERVER_REPOS" = 1 ] ; then
				echo "## server $SSH_HOST:$SSH_PORT exactly one repo on this server - inline"
				continue
			fi
			echo "## server $SSH_HOST:$SSH_PORT not enough repos for multiplexing but more than one -- goes to global batch"
			[ -n "$SSH_USE_ROOT_MX" ] | {
				SSH_USE_ROOT_MX=1
			}
			continue
		fi

		echo "## server $SSH_HOST:$SSH_PORT will do multiple control masters"

		SSH_NEED_WAIT=1
		if [ -z "$SSH_ROOT_MX_USED" ] ; then
			SSH_USE_ROOT_MX=1
			SSH_ROOT_MX_USED=1
			(
				set -- --intern-ssh-mx-root-temp-block
				. "$MDLT_ORIGIN/myx/myx.distro-source/sh-lib/DistroImage.SyncScriptMaker.include" 
			)
		fi

		echo "("
		echo

		echo 'ssh -MNf $SSH_COMMON_OPTIONS -o ControlMaster=yes -o ControlPath="./%C" -o ControlPersist=3m -p' "${SSH_PORT:-22}" git@"$SSH_HOST" ' || : &'
		for i in $(seq 1 $((MASTER_COUNT-1))); do
			# first master uses "%C", extras use "p1","p2",‚Ä¶
			local label=$([ "$i" -eq 0 ] && echo '%C' || echo "$SSH_HOST-p$i")
			echo "ssh -MNf \$SSH_COMMON_OPTIONS -o ControlMaster=yes -o ControlPath=\"./$label\" -o ControlPersist=3m -p ${SSH_PORT:-22} git@$SSH_HOST || : &"
		done
		echo wait
		
		# export a minimal, high-throughput SSH for Git
		echo "export GIT_SSH_COMMAND='sh -c \""
		echo "idx=\\\$(awk '\''BEGIN { srand(); print int(rand()*$MASTER_COUNT) }'\'')"
		echo "slot=\\\$( [ \\\"\\\$idx\\\" -eq 0 ] && echo \\\"%C\\\" || echo \\\"github.com-p\\\$idx\\\" )"
		echo "exec ssh $SSH_COMMON_OPTIONS -o ControlMaster=auto -o ControlPath=./\\\$slot -o ControlPersist=3m \\\"\\\$@\\\""
		echo "\" ssh'"

		printf '%s\n' "$SERVER_REPO_LIST" \
		| (
			set -- --intern-stdin-${syncMode#--}-block
			. "$MDLT_ORIGIN/myx/myx.distro-source/sh-lib/DistroImage.SyncScriptMaker.include" 
		)

		echo ") &"

		REPO_LIST="$( printf '%s\n' "$REPO_LIST" | grep -Fvxf <( printf '%s\n' "$SERVER_REPO_LIST" ) || : )"

	done <<< "$( printf '%s\n' "$MX_SSH_REPO_LIST" | cut -d' ' -f1,2 | sort -u )"

fi

if [ -n "$REPO_LIST" ] ; then
	if [ -n "$SSH_USE_ROOT_MX" ] ; then
		if [ -z "$SSH_ROOT_MX_USED" ] ; then
			(
				set -- --intern-ssh-mx-root-temp-block
				. "$MDLT_ORIGIN/myx/myx.distro-source/sh-lib/DistroImage.SyncScriptMaker.include" 
			)
		fi
		# export a minimal, high-throughput SSH for Git
		echo 'export GIT_SSH_COMMAND="ssh $SSH_COMMON_OPTS -o ControlMaster=auto -o ControlPath=./%C -o ControlPersist=2m"'
	else
		echo 'export GIT_SSH_COMMAND="ssh $SSH_COMMON_OPTS"'
	fi

	printf '%s\n' "$REPO_LIST" \
	| (
		set -- --intern-stdin-${syncMode#--}-block
		. "$MDLT_ORIGIN/myx/myx.distro-source/sh-lib/DistroImage.SyncScriptMaker.include" 
	)
fi

if [ -n "$SSH_NEED_WAIT" ] ; then
	echo wait
fi

#!/usr/bin/env bash
# ^^^ for syntax checking in the editor only

# INF="$MMDAPP/source/myx/util.repository-myx/sh-data/repository/repository.inf"
# ( set -e ; echo "# copied from $INF at `date`" ; cat "$INF" ) > "$MMDAPP/source/myx/repository.inf"
