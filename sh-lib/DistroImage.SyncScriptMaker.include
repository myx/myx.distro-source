#!/usr/bin/env bash
# ^^^ for syntax checking in the editor only

local syncType
case "$useStage" in
	*-pull) # gitClonePull | GitClonePull
		syncType="Pull"
	;;
	*-push) # gitCloneSync | GitCloneSync
		syncType="Sync"
	;;
	*)
		echo "⛔ ERROR: $MDSC_CMD: invalid build stage ($useStage) ($MDSC_OPTION, $@)" >&2
		set +e ; return 1
	;;
esac

local syncMode="${1:---parallel}"
local syncCommandPath=""
local syncCommandName=""

[ "$syncType" != "Pull" ] || [ "$syncMode" == "--portable" ] || {
	case "$useStage" in
		source-*)
			case "$MDSC_INMODE" in
				source) syncType=Sync ;;
			esac
		;;
	esac
}


if \
[ -x "$MDLT_ORIGIN/myx/myx.common/os-myx.common/host/tarball/share/myx.common/bin/git/clone${syncType}" ] ; then
	syncCommandPath="$MDLT_ORIGIN/myx/myx.common/os-myx.common/host/tarball/share/myx.common/bin"
	syncCommandName="git/clone${syncType}"
elif \
[ "$( which myx.common )" != "" ] ; then
	syncCommandPath="$( dirname "$( dirname "$( myx.common which git/clone${syncType} )" )" )"
	syncCommandName="git/clone${syncType}"
	if [ ! -x "$syncCommandPath/$syncCommandName" ] ; then
		echo "⛔ ERROR: $MDSC_CMD: myx.common which git/clone${syncType} failed ($MDSC_OPTION, $@)" >&2
		set +e ; return 1
	fi
else
	echo "⛔ ERROR: $MDSC_CMD: can't locate myx.common ($useStage) ($MDSC_OPTION, $@)" >&2
	set +e ; return 1
fi

case "$syncMode" in
	--parallel|--sequence|--obsolete|--portable)
		## nothing
	;;
	*)
		echo "⛔ ERROR: $MDSC_CMD: invalid sync mode: $syncMode ($MDSC_OPTION, $@)" >&2
		set +e ; return 1
	;;
esac

echo 'set -e' 
printf 'export MMDAPP="${MMDAPP:-%s}"\n' "$MMDAPP"
echo 'mkdir -p "$MMDAPP/source"'
echo 'cd "$MMDAPP/source"'
echo

# ─── configure SSH for multiplexing via this temp dir ────────────────────────
{
	echo 'if [ -n "$MMDAPP" ] && [ -d "$MMDAPP/.local" ]; then'
	echo '  mkdir -p "$MMDAPP/.local/temp"'
	echo '  tmpdir=$(mktemp -d "$MMDAPP/.local/temp/ssh-control-masters-XXXXXX")'
	echo 'else'
			# fallback into system temp: TMPDIR on macOS, /tmp elsewhere
	echo '  tmpdir=$(mktemp -d "${TMPDIR:-/tmp}/ssh-control-masters-XXXXXX")'
	echo 'fi'

	echo "trap 'rm -rf \"\$tmpdir\"' EXIT"

	echo 'export GIT_SSH_COMMAND=" \'
	echo '	ssh -4 \'
	echo '	-o ControlMaster=auto \'
	echo '	-o ControlPath=$tmpdir/%C \'
	echo '	-o ControlPersist=1m'
	echo '"'
}


case "$syncMode" in
	--parallel)
		printf '( %s | %s ) <<XARGS_INPUT\n' \
			"tr '\n' '\0'" \
			"xargs -0 -P '${2:-8}' -I% -- sh -c 'myx.common lib/prefix -3 %'"
		
		# awk '$0 !~ /^$|^[ \t]+$|^#|^[ \t]+#/ { print $0; }' | \
		local itemTarget itemSource useBranch
		DistroImageSync --intern-print-repo-list-from-stdin \
		| while read -r itemTarget itemSource useBranch _; do
			# ${syncType} - cloneSync clonePull
			echo myx.common "$syncCommandName" "$itemTarget" "$itemSource" "$useBranch"
		done
		
		printf 'XARGS_INPUT\n\n'
	;;
	--sequence)
		# awk '$0 !~ /^$|^[ \t]+$|^#|^[ \t]+#/ { print $0; }' | \
		local itemTarget itemSource useBranch
		echo '### '
		cat "$syncCommandPath/lib/sedLineReader"
		echo
		echo '### '
		cat "$syncCommandPath/lib/prefix"
		echo
		echo '### '
		cat "$syncCommandPath/lib/async"
		echo
		echo '### '
		cat "$syncCommandPath/$syncCommandName"
		echo
		echo '### '
		echo 
		DistroImageSync --intern-print-repo-list-from-stdin \
		| while read -r itemTarget itemSource useBranch _; do
			# ${syncType} - GitCloneSync GitClonePull
			echo Prefix -2 GitClone${syncType} "$itemTarget" "$itemSource" "$useBranch"
		done
	;;
	--portable)
		# awk '$0 !~ /^$|^[ \t]+$|^#|^[ \t]+#/ { print $0; }' | \
		local itemTarget itemSource useBranch rowCounter
		echo
		echo '### '
		grep -v -e '^[[:space:]]*$' -e '^[[:space:]]*#' "$syncCommandPath/lib/sedLineReader"
		echo
		echo '### '
		grep -v -e '^[[:space:]]*$' -e '^[[:space:]]*#' "$syncCommandPath/lib/prefix"
		echo
		echo '### '
		grep -v -e '^[[:space:]]*$' -e '^[[:space:]]*#' "$syncCommandPath/lib/async"
		echo
		echo '### '
		grep -v -e '^[[:space:]]*$' -e '^[[:space:]]*#' "$syncCommandPath/$syncCommandName"
		echo
		echo '### '
		echo 
		DistroImageSync --intern-print-repo-list-from-stdin \
		| while read -r itemTarget itemSource useBranch _; do
			# ${syncType} - GitCloneSync GitClonePull
			echo Async -2 GitClone${syncType} "$itemTarget" "$itemSource" "$useBranch"
			rowCounter="${rowCounter}@"
			if [ "$rowCounter" = "@@@@@@@@" ] ; then
				echo wait
				rowCounter=""
			fi
		done
		echo wait
	;;
esac

#  mkdir -p ~/.ssh/controlmasters/
#  GIT_SSH_COMMAND="ssh -4 -o ControlMaster=auto -o ControlPath=~/.ssh/controlmasters/%C -o ControlPersist=10m"
#  export GIT_SSH_COMMAND

#  LIST_REPOS="$MMDAPP/source/ndm/util.repository-ndm/data/repository/remotes-list-ndm.txt"
#  test -s "$LIST_REPOS" && cat "$LIST_REPOS" | parallelGitCloneSync 6

#!/usr/bin/env bash
# ^^^ for syntax checking in the editor only

# INF="$MMDAPP/source/myx/util.repository-myx/sh-data/repository/repository.inf"
# ( set -e ; echo "# copied from $INF at `date`" ; cat "$INF" ) > "$MMDAPP/source/myx/repository.inf"
