#!/usr/bin/env bash
# ^^^ for syntax checking in the editor only

[ "$1" != "--no-ssh-mx" ] || {
	local NO_SSH_MX=$1
	shift
}

local syncType
case "$useStage" in
	*-pull) # gitClonePull | GitClonePull
		syncType="Pull"
	;;
	*-push) # gitCloneSync | GitCloneSync
		syncType="Sync"
	;;
	*)
		echo "â›” ERROR: $MDSC_CMD: invalid build stage ($useStage) ($MDSC_OPTION, $@)" >&2
		set +e ; return 1
	;;
esac

local syncMode="${1:---parallel}"
local syncCommandPath=""
local syncCommandName=""

[ "$syncType" != "Pull" ] || [ "$syncMode" == "--portable" ] || {
	case "$useStage" in
		source-*)
			case "$MDSC_INMODE" in
				source) syncType=Sync ;;
			esac
		;;
	esac
}


if \
[ -x "$MDLT_ORIGIN/myx/myx.common/os-myx.common/host/tarball/share/myx.common/bin/git/clone${syncType}" ] ; then
	syncCommandPath="$MDLT_ORIGIN/myx/myx.common/os-myx.common/host/tarball/share/myx.common/bin"
	syncCommandName="git/clone${syncType}"
elif \
[ "$( which myx.common )" != "" ] ; then
	syncCommandPath="$( dirname "$( dirname "$( myx.common which git/clone${syncType} )" )" )"
	syncCommandName="git/clone${syncType}"
	if [ ! -x "$syncCommandPath/$syncCommandName" ] ; then
		echo "â›” ERROR: $MDSC_CMD: myx.common which git/clone${syncType} failed ($MDSC_OPTION, $@)" >&2
		set +e ; return 1
	fi
else
	echo "â›” ERROR: $MDSC_CMD: can't locate myx.common ($useStage) ($MDSC_OPTION, $@)" >&2
	set +e ; return 1
fi

case "$syncMode" in
	--parallel|--sequence|--obsolete|--portable)
		## nothing
	;;
	*)
		echo "â›” ERROR: $MDSC_CMD: invalid sync mode: $syncMode ($MDSC_OPTION, $@)" >&2
		set +e ; return 1
	;;
esac

local REPO_LIST; REPO_LIST="$(DistroImageSync --intern-print-repo-list-from-stdin)"

if [ -z "$REPO_LIST" ] ; then
	echo "â›” ERROR: $MDSC_CMD: empty repo list:" >&2
	set +e ; return 1
fi

echo 'set -e' 
printf 'export MMDAPP="${MMDAPP:-%s}"\n' "$MMDAPP"
echo 'mkdir -p "$MMDAPP/source"'
echo 'cd "$MMDAPP/source"'
echo

# â”€â”€â”€ configure SSH for multiplexing via this temp dir â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
{
	# extract 2nd-column SSH URLs (skip http:// & https://)
	local SSH_URLS=$( printf '%s\n' "$REPO_LIST" | awk '$2 !~ /^https?:\/\// { print $2 }' )
	
	if [ -z "$NO_SSH_MX" ] && [ "$(printf '%s\n' "$SSH_URLS" | wc -l)" -gt 2 ]; then
		# make a socket-dir and ensure itâ€™s cleaned up
		echo 'if [ -n "$MMDAPP" ] && [ -d "$MMDAPP/.local" ]; then'
		echo '  mkdir -p "$MMDAPP/.local/temp"'
		echo '  tmpdir=$(mktemp -d "$MMDAPP/.local/temp/sshmux-XXXXX")'
		echo 'else'
				# fallback into system temp: TMPDIR on macOS, /tmp elsewhere
		echo '  tmpdir=$(mktemp -d "${TMPDIR:-/tmp}/ssh-control-masters-XXXXXX")'
		echo 'fi'

		echo "trap 'rm -rf \"\$tmpdir\"' EXIT"
		echo 'pushd "$tmpdir" >/dev/null || exit 1'
		# export a minimal, high-throughput SSH for Git
		echo 'export GIT_SSH_COMMAND="ssh -4 -T -q \'
		echo 	' -o BatchMode=yes -o ControlMaster=auto -o ControlPath=./%C -o ControlPersist=2m \'
		echo	' -o Ciphers=chacha20-poly1305@openssh.com,aes128-gcm@openssh.com,aes256-gcm@openssh.com \'
		echo	' -o KexAlgorithms=curve25519-sha256 \'
		echo	' -o HostKeyAlgorithms=ssh-ed25519,ecdsa-sha2-nistp256,ssh-rsa \'
		echo	' -o Compression=yes \'
		echo '"'
  
		# build unique "host port" list
		local SSH_SERVERS=$(
			printf '%s\n' "$SSH_URLS" \
			| sed -nE 's#^(ssh://)?([^@]+@)?([^:/]+)(:([0-9]+))?.*#\3 \5#p' \
			| sort -u
		)

		# spawn one master per unique host:port
		printf '%s\n' "$SSH_SERVERS" \
		| while read -r SSH_HOST SSH_PORT; do
			echo 'ssh -MNf -o ControlMaster=yes -o ControlPath="./%C" -o ControlPersist=1m -p' "${SSH_PORT:-22}" git@"$SSH_HOST"
		done
	fi
}

# embed functions (xargs from --parallel doesn't support functions)
case "$syncMode" in
	--sequence|--obsolete|--portable)
		echo 
		echo '# ðŸ“š lib/sedLineReader'
		echo 
		grep -v -e '^[[:space:]]*$' -e '^[[:space:]]*#' "$syncCommandPath/lib/sedLineReader"
		echo 
		echo '# ðŸ“š lib/prefix'
		echo 
		grep -v -e '^[[:space:]]*$' -e '^[[:space:]]*#' "$syncCommandPath/lib/prefix"
		echo 
		echo '# ðŸ“š lib/async'
		echo 
		grep -v -e '^[[:space:]]*$' -e '^[[:space:]]*#' "$syncCommandPath/lib/async"
		echo 
		echo "# ðŸ“˜ $syncCommandName"
		echo 
		grep -v -e '^[[:space:]]*$' -e '^[[:space:]]*#' "$syncCommandPath/$syncCommandName"
		echo 
		echo '# ðŸ§¾ Image Sync main block'
		echo 
	;;
esac

case "$syncMode" in
	--parallel)
		printf '( %s | %s ) <<XARGS_INPUT\n' \
			"tr '\n' '\0'" \
			"xargs -0 -P '${2:-8}' -I% -- sh -c 'myx.common lib/prefix -3 %'"
		
		# awk '$0 !~ /^$|^[ \t]+$|^#|^[ \t]+#/ { print $0; }' | \
		local itemTarget itemSource useBranch
		printf '%s\n' "$REPO_LIST" \
		| while read -r itemTarget itemSource useBranch _; do
			# ${syncType} - cloneSync clonePull
			echo myx.common "$syncCommandName" "$itemTarget" "$itemSource" "$useBranch"
		done
		
		printf 'XARGS_INPUT\n\n'
	;;
	--sequence)
		# awk '$0 !~ /^$|^[ \t]+$|^#|^[ \t]+#/ { print $0; }' | \
		local itemTarget itemSource useBranch
		printf '%s\n' "$REPO_LIST" \
		| while read -r itemTarget itemSource useBranch _; do
			# ${syncType} - GitCloneSync GitClonePull
			echo Prefix -2 GitClone${syncType} "$itemTarget" "$itemSource" "$useBranch"
		done
	;;
	--portable)
		# awk '$0 !~ /^$|^[ \t]+$|^#|^[ \t]+#/ { print $0; }' | \
		local itemTarget itemSource useBranch rowCounter
		printf '%s\n' "$REPO_LIST" \
		| while read -r itemTarget itemSource useBranch _; do
			# ${syncType} - GitCloneSync GitClonePull
			echo Async -2 GitClone${syncType} "$itemTarget" "$itemSource" "$useBranch"
			rowCounter="${rowCounter}@"
			if [ "$rowCounter" = "@@@@@@@@" ] ; then
				echo wait
				rowCounter=""
			fi
		done
		echo wait
	;;
esac

echo 'popd >/dev/null'

#!/usr/bin/env bash
# ^^^ for syntax checking in the editor only

# INF="$MMDAPP/source/myx/util.repository-myx/sh-data/repository/repository.inf"
# ( set -e ; echo "# copied from $INF at `date`" ; cat "$INF" ) > "$MMDAPP/source/myx/repository.inf"
