#!/usr/bin/env bash
# ^^^ for syntax checking in the editor only

case "$1" in
	--make-workspace-integration-files)
		shift

		if [ "$MDLT_ORIGIN" = "$MMDAPP/.local" ] ; then
			touch $MMDAPP/.local/MDSC.source.settings.env
		fi

		DistroSourceTools --make-rebuild-namespace-roots

		DistroSourceTools --make-console-command "$@"
		DistroSourceTools --make-code-workspace "$@"
		return 0
	;;
	--make-static-non-editable)
		[ -n "$2" ] || {
			echo "â›” ERROR: $MDSC_CMD: $1 missing target filename" >&2
			set +e ; return 1
		}
		shift

		if [ -f "$1" ]; then
			if command -v chflags >/dev/null 2>&1; then
				chflags nouchg "$1" 2>/dev/null || :
			fi
			rm -f "$1"
			#chmod u+w "$1" 2>/dev/null || :
		fi

		cat "${2:-"-"}" > "$1"

		if [ -f "$1" ]; then
			# chmod 444 "$1" 2>/dev/null || : #### <-- sorry - seems to be bad idea
			if command -v chflags >/dev/null 2>&1; then
				chflags uchg "$1" 2>/dev/null || :
			fi
		fi

		return 0
	;;
	--make-code-workspace)
		shift
		set -e
		. "$MDLT_ORIGIN/myx/myx.distro-source/sh-lib/SourceTools.Make.BuildCodeWorkspaceData.include"
		return 0
	;;
	--make-console-command)
		shift
		set -e
		# shortcut for: `DistroSourceTools --make-console-script`
		. "$MDLT_ORIGIN/myx/myx.distro-source/sh-lib/SourceTools.Make.DistroSourceConsoleShellScript.include" \
		> "$MMDAPP/DistroSourceConsole.sh"
		chmod 770 "$MMDAPP/DistroSourceConsole.sh"

		if [ "$1" != "--quiet" ] ; then
			local consoles="$( ls $MMDAPP/Distro*Console.sh | sed 's|^|	|g' )"
			printf \
				"\nNote: DistroSourceConsole.sh created, now you can run:\n%s\n\n" \
				"$consoles" \
			>&2
		fi

		return 0
	;;
	--make-console-script)
		shift
		. "$MDLT_ORIGIN/myx/myx.distro-source/sh-lib/SourceTools.Make.DistroSourceConsoleShellScript.include"
		return 0
	;;
	## Synchronize-recover '.local/roots/*.distro-namespace' and 'source/*/repository.inf'
	--make-rebuild-repository-roots|--make-rebuild-namespace-roots)
		shift
		local MDSC_SOURCE="${MDSC_SOURCE:-"$MMDAPP/source"}"
		local MDSC_NSPACE="$MMDAPP/.local/roots"
		mkdir -p "$MDSC_NSPACE"
		local repositoryName repositoryRoot
		for repositoryFile in $( find "$MDSC_SOURCE" -mindepth 2 -maxdepth 2 -name repository.inf | sort ) ; do
			repositoryName="${repositoryFile#$MDSC_SOURCE/}"
			repositoryName="${repositoryName%/repository.inf}"
			repositoryRoot="$MDSC_NSPACE/$repositoryName.distro-namespace"
			[ -f "$repositoryRoot" ] || {
				echo "$MDSC_CMD: sync .local: ${repositoryRoot#$MMDAPP/}" >&2
				cp "$repositoryFile" "$repositoryRoot"
			}
		done
		for repositoryRoot in $( find "$MDSC_NSPACE" -mindepth 1 -maxdepth 1 -name '*.distro-namespace' | sort ) ; do
			repositoryName="${repositoryRoot#$MDSC_NSPACE/}"
			repositoryName="${repositoryName%.distro-namespace}"
			repositoryFile="$MDSC_SOURCE/$repositoryName/repository.inf"
			[ -f "$repositoryFile" ] || {
				echo "$MDSC_CMD: sync source: ${repositoryFile#$MMDAPP/}" >&2
				cp "$repositoryRoot" "$repositoryFile"
			}
		done
		return 0
	;;
	*)
		echo "â›” ERROR: $MDSC_CMD: invalid option: $1" >&2
		set +e ; return 1
	;;
esac
