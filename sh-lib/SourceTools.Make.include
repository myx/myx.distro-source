#!/usr/bin/env bash
# ^^^ for syntax checking in the editor only

case "$1" in
	--make-workspace-integration-files)
		shift

		if [ "$MDLT_ORIGIN" == "$MMDAPP/.local" ] ; then
			touch $MMDAPP/.local/MDSC.source.settings.env
		fi

		DistroSourceTools --make-console-command "$@"
		DistroSourceTools --make-code-workspace "$@"
		return 0
	;;
	--make-code-workspace)
		shift
		set -e

		local WS_NAME="$( basename "$MMDAPP" ).code-workspace"
		local WS_FILE="$MMDAPP/$WS_NAME"

		local REPOS="$( 
			local ITEM
			echo "ListAllRepositories.fn.sh --no-cache --no-index" \
			| "$MMDAPP/DistroSourceConsole.sh" --non-interactive \
			| while read -r ITEM ; do
				printf \
					'{ "path" : "%s", "name" : "%s" },\n' \
					"$MMDAPP/source/$ITEM/" \
					"📁 Repository Root: $ITEM"
			done
		)"

		cat > "$MMDAPP/$WS_NAME" <<CODEWORKSPACE
		{
			"folders": [ 
				$REPOS
				{ 
					"path": "$MMDAPP/output/"
					"name": "📦 Browse: output"
				},
				{ 
					"path": "$MMDAPP/source/"
					"name": "📝 Browse: source"
				}
			],
			"settings": {
    			"extensions.showRecommendationsOnlyOnDemand": true,
				"files.exclude": {
					"📦 Browse: output/**": true,
					"📝 Browse: source/**": true
				},
				"search.exclude": {
					"📦 Browse: output/**": true,
					"📝 Browse: source/**": true
				},
				"files.watcherExclude": {
					"📦 Browse: output/**": true,
					"📝 Browse: source/**": true
				}
			}	
			"tasks" : {
				"version": "2.0.0",
				"tasks": [
					{
						"label": "🖥️ Start Source Console...",
						"type": "shell",
						"command": "bash '$MMDAPP/DistroSourceConsole.sh'",
						"group": { 
							"kind": "build", 
							"isDefault": true 
						}
					},
					{
						"label": "⬇️ Pull All Known Sources...",
						"type": "shell",
						"command": "bash -c 'echo \"DistroImageSync.fn.sh --all-tasks --execute-source-prepare-pull\" | $MMDAPP/DistroSourceConsole.sh --non-interactive'",
						"group": { 
							"kind": "build", 
							"isDefault": true 
						}
					},
					{
						"label": "🛠️ Update Local Tools...",
						"type": "shell",
						"command": "bash '${MMDAPP}/.local/myx/myx.distro-source/sh-scripts/DistroSourceTools.fn.sh' --upgrade-source-tools",
						"group": { 
							"kind": "build", 
							"isDefault": true 
						}
					}
				]
			}
		}
CODEWORKSPACE
		chmod 640 "$MMDAPP/$WS_NAME"

		mkdir -p "$MMDAPP/.vscode/"{extensions,user-data}

		cat > "$MMDAPP/start.sh" <<'CODELAUNCHER'
		#!/usr/bin/env bash
		cd "\$(dirname "\$0")"
		code \
		--extensions-dir "\$PWD/.vscode/extensions" \
		--user-data-dir   "\$PWD/.vscode/user-data" \
		"\$PWD/project.code-workspace"
CODELAUNCHER

		chmod +x "$MMDAPP/start.sh"

		if [ "$1" != "--quiet" ] ; then
			printf \
				"\nNote: $WS_NAME created, you can start Code with:\n\t%s\n\n" \
				"$MMDAPP/$WS_NAME" \
			>&2
		fi

		return 0
	;;
	--make-console-command)
		shift
		set -e
		( 
			DistroSourceTools(){
				. "$MDLT_ORIGIN/myx/myx.distro-source/sh-lib/SourceTools.Make.include"
			}
			DistroSourceTools --make-console-script > "$MMDAPP/DistroSourceConsole.sh"
		)
		chmod 770 "$MMDAPP/DistroSourceConsole.sh"

		if [ "$1" != "--quiet" ] ; then
			local consoles="$( ls $MMDAPP/Distro*Console.sh | sed 's|^|	|g' )"
			printf \
				"\nNote: DistroSourceConsole.sh created, now you can run:\n%s\n\n" \
				"$consoles" \
			>&2
		fi

		return 0
	;;
	--make-console-script)
		shift

		cat << 'DISTROCONSOLE'
			#!/usr/bin/env bash

			set -e

			if [ -z "$MMDAPP" ] || [ ! -d "$MMDAPP" ] ; then
				MMDAPP="$( ( cd $(dirname "$0") ; pwd ) )"
			fi

			[ -d "$MMDAPP/.local" ] || ( echo "⛔ ERROR: expecting '$MMDAPP/.local' directory." >&2 && exit 1 )

			MDLT_CONSOLE_ORIGIN="$( ( \
				. "$MMDAPP/.local/MDLT.settings.env" ; \
				echo "${MDLT_CONSOLE_ORIGIN:-.local}" \
			) )"
			MDLC_INMODE="${MDLT_CONSOLE_ORIGIN#$MMDAPP/}"
			case "$MDLC_INMODE" in
				.local)
					export MDLT_ORIGIN="$MMDAPP/.local"
				;;
				source)
					if [ -f "$MMDAPP/source/myx/myx.distro-system/sh-lib/SystemContext.include" ] ; then
						export MDLT_ORIGIN="$MMDAPP/$MDLC_INMODE"
					else
						export MDLT_ORIGIN="$MMDAPP/.local"
					fi
				;;
				/*)
					if [ -f "$MDLC_INMODE/myx/myx.distro-system/sh-lib/SystemContext.include" ] ; then
						export MDLT_ORIGIN="$MDLC_INMODE"
					else
						export MDLT_ORIGIN="$MMDAPP/.local"
					fi
				;;
				*)
					export MDLT_ORIGIN="$MMDAPP/.local"
				;;
			esac
			if [ ! -f "$MDLT_ORIGIN/myx/myx.distro-system/sh-lib/SystemContext.include" ] ; then
				echo "⛔ ERROR: SourceContext.SetInputSpec: can't find/detect origin, spec: $MDLT_CONSOLE_ORIGIN, origin: $MDLT_ORIGIN" >&2
				exit 1
			fi

			cd "$MMDAPP"
			export MMDAPP

			if [ "$1" == "--non-interactive" ] ; then
				shift
				{
					echo MDSC_ARGUMENTS="$@"
					echo ". '$MDLT_ORIGIN/myx/myx.distro-source/sh-lib/console-source-bashrc.rc'"
					cat
				} | bash -s
				exit 0
			fi
			
			export MDSC_ARGUMENTS="$@"
			bash --rcfile "$MDLT_ORIGIN/myx/myx.distro-source/sh-lib/console-source-bashrc.rc" -i
DISTROCONSOLE

		return 0
	;;
	*)
		echo "⛔ ERROR: $MDSC_CMD: invalid option: $1" >&2
		set +e ; return 1
	;;
esac
