#!/usr/bin/env bash
# ^^^ for syntax checking in the editor only

case "$1" in
	--make-workspace-integration-files)
		shift

		if [ "$MDLT_ORIGIN" = "$MMDAPP/.local" ] ; then
			touch $MMDAPP/.local/MDSC.source.settings.env
		fi

		DistroSourceTools --make-rebuild-namespace-roots

		DistroSourceTools --make-console-command "$@"
		DistroSourceTools --make-code-workspace "$@"
		return 0
	;;
	--make-static-non-editable)
		[ -n "$2" ] || {
			echo "⛔ ERROR: $MDSC_CMD: $1 missing target filename" >&2
			set +e ; return 1
		}
		shift

		if [ -f "$1" ]; then
			if command -v chflags >/dev/null 2>&1; then
				chflags nouchg "$1" 2>/dev/null || true
			fi
			rm -f "$1"
			#chmod u+w "$1" 2>/dev/null || true
		fi

		cat "${2:-"-"}" > "$1"

		if [ -f "$1" ]; then
			# chmod 444 "$1" 2>/dev/null || true #### <-- sorry - seems to be bad idea
			if command -v chflags >/dev/null 2>&1; then
				chflags uchg "$1" 2>/dev/null || true
			fi
		fi

		return 0
	;;
	--make-code-workspace)
		shift
		set -e

		local WS_NAME="$( basename "$MMDAPP" ).code-workspace"
		local WS_FILE="$MMDAPP/$WS_NAME"

		local REPOS="$( 
			local ITEM
			echo "ListAllRepositories.fn.sh --no-cache --no-index" --all-repositories \
			| "$MMDAPP/DistroSourceConsole.sh" --non-interactive \
			| while read -r ITEM ; do
				printf \
					'{ "path" : "%s", "name" : "%s" },\n' \
					"$MMDAPP/source/$ITEM/" \
					"📁 Repository Root: $ITEM"
			done
		)"

		local VSE_PATH="$MMDAPP/.local/.vscode/browse"
		local VSEO_PATH="$VSE_PATH/📦 Browse - output"
		local VSES_PATH="$VSE_PATH/📝 Browse - source"

		local VSS_PATH="$MMDAPP/.local/.vscode/status"
		local VSSA_PATH="$VSS_PATH/⏩ Workspace - Actions"
		local VSSB_PATH="$VSS_PATH/🧱 Workspace - Build"
		local VSSR_PATH="$VSS_PATH/🩺 Workspace - Recover"

		mkdir -p \
			"$VSE_PATH" \
			"$VSSB_PATH" \
			"$VSSR_PATH" \

		mkdir -p "$MMDAPP/actions"
		ln -sfn "$MMDAPP/actions" "$VSSA_PATH"

		if [ -d "$MMDAPP/output" ]; then
			ln -sfn "$MMDAPP/output" "$VSEO_PATH"
		else
			[ ! -L "$VSEO_PATH" ] || rm "$VSEO_PATH"		
		fi
		ln -sfn "$MMDAPP/source" "$VSES_PATH"

		ln -sfn "$MMDAPP/cached/build-time-stamp.txt" "$VSSB_PATH/LatestBuildTimeStamp.txt"

		ln -sfn "$MMDAPP/cached/enhance" "$VSSB_PATH/basic-indices"

		echo "Hello! This is generated folder. It contains symlinks to some internal directories that are used in this workspace." \
		| DistroSourceTools --make-static-non-editable "$VSE_PATH/🔍 README.md"

		echo "Hello! This is generated folder. Some content may appear here as result of operations executed." \
		| DistroSourceTools --make-static-non-editable "$VSS_PATH/🛠️ README.md"

		echo "Hello! This is generated folder. Here you may find build logs and inventory reports after builds." \
		| DistroSourceTools --make-static-non-editable "$VSSB_PATH/🧱 README.md"

		echo "Hello! This is generated folder. Here you may find commands and handy information to fix, reinstall or export your workspace." \
		| DistroSourceTools --make-static-non-editable "$VSSR_PATH/🩺 README.md"

		cat > "$MMDAPP/$WS_NAME" <<CODEWORKSPACE
		{
			"folders": [ 
				$REPOS
				{ 
					"path": "$MMDAPP/.local/.vscode/browse",
					"name": "🔍 Browse"
				},
				{ 
					"path": "$MMDAPP/.local/.vscode/status",
					"name": "🛠️ Workspace"
				}
			],
			"settings": {
				"search.followSymlinks": false,
    			"extensions.showRecommendationsOnlyOnDemand": true,
				"files.exclude": {
					"📦 Browse: output/**": true,
					"📝 Browse: source/**": true,
					"**/.git": true
				},
				"search.exclude": {
					"📦 Browse: output/**": true,
					"📝 Browse: source/**": true,
					"**/.git": true
				},
				"files.watcherExclude": {
					"📦 Browse: output/**": true,
					"📝 Browse: source/**": true
				}
			},
			"tasks" : {
				"version": "2.0.0",
				"tasks": [
					{
						"label": "🖥️ Start Source Console...",
						"type": "shell",
						"command": "bash '$MMDAPP/DistroSourceConsole.sh'",
						"group": { 
							"kind": "build", 
							"isDefault": true 
						}
					},
					{
						"label": "⬇️ Pull/Sync All Known Sources...",
						"type": "shell",
						"command": "bash -c 'echo \"DistroImageSync.fn.sh --all-tasks --execute-source-prepare-pull\" | $MMDAPP/DistroSourceConsole.sh --non-interactive'",
						"group": { 
							"kind": "build", 
							"isDefault": true 
						}
					},
					{
						"label": "🛫 Ingest Source Changes, Index Snapshot...",
						"type": "shell",
						"command": "bash -c 'echo \"BuildCachedFromSource.fn.sh\" | $MMDAPP/DistroSourceConsole.sh --non-interactive'",
						"group": { 
							"kind": "build", 
							"isDefault": true 
						}
					},
					{
						"label": "🛠️ Update Local Tools...",
						"type": "shell",
						"command": "bash '${MMDAPP}/.local/myx/myx.distro-.local/sh-scripts/DistroLocalTools.fn.sh' --upgrade-installed-tools",
						"group": { 
							"kind": "build", 
							"isDefault": true 
						}
					}
				]
			}
		}
CODEWORKSPACE
		chmod 640 "$MMDAPP/$WS_NAME"

		mkdir -p "$MMDAPP/.vscode/"{extensions,user-data}

		{
			echo '#!/usr/bin/env bash'
			echo 'cd "\$(dirname "\$0")"'
			echo 'code \'
			echo '--extensions-dir "\$PWD/.vscode/extensions" \'
			echo '--user-data-dir   "\$PWD/.vscode/user-data" \'
			echo '"\$PWD/project.code-workspace"'
		} > "$MMDAPP/start.sh"

		chmod +x "$MMDAPP/start.sh"

		if [ "$1" != "--quiet" ] ; then
			printf \
				"\nNote: $WS_NAME created, you can start Code with:\n\t%s\n\n" \
				"$MMDAPP/$WS_NAME" \
			>&2
		fi

		return 0
	;;
	--make-console-command)
		shift
		set -e
		( 
			DistroSourceTools(){
				. "$MDLT_ORIGIN/myx/myx.distro-source/sh-lib/SourceTools.Make.include"
			}
			DistroSourceTools --make-console-script > "$MMDAPP/DistroSourceConsole.sh"
		)
		chmod 770 "$MMDAPP/DistroSourceConsole.sh"

		if [ "$1" != "--quiet" ] ; then
			local consoles="$( ls $MMDAPP/Distro*Console.sh | sed 's|^|	|g' )"
			printf \
				"\nNote: DistroSourceConsole.sh created, now you can run:\n%s\n\n" \
				"$consoles" \
			>&2
		fi

		return 0
	;;
	--make-console-script)
		shift

		cat <<- 'DISTROCONSOLE'
			#!/usr/bin/env bash

			set -e

			if [ -z "$MMDAPP" ] || [ ! -d "$MMDAPP" ] ; then
				MMDAPP="$( ( cd $(dirname "$0") ; pwd ) )"
			fi

			[ -d "$MMDAPP/.local" ] || ( echo "⛔ ERROR: expecting '$MMDAPP/.local' directory." >&2 && exit 1 )

			MDLT_CONSOLE_ORIGIN="$( ( \
				. "$MMDAPP/.local/MDLT.settings.env" ; \
				echo "${MDLT_CONSOLE_ORIGIN:-.local}" \
			) )"
			MDLC_INMODE="${MDLT_CONSOLE_ORIGIN#$MMDAPP/}"
			case "$MDLC_INMODE" in
				.local)
					export MDLT_ORIGIN="$MMDAPP/.local"
				;;
				source)
					if [ -f "$MMDAPP/source/myx/myx.distro-system/sh-lib/SystemContext.include" ] ; then
						export MDLT_ORIGIN="$MMDAPP/$MDLC_INMODE"
					else
						export MDLT_ORIGIN="$MMDAPP/.local"
					fi
				;;
				/*)
					if [ -f "$MDLC_INMODE/myx/myx.distro-system/sh-lib/SystemContext.include" ] ; then
						export MDLT_ORIGIN="$MDLC_INMODE"
					else
						export MDLT_ORIGIN="$MMDAPP/.local"
					fi
				;;
				*)
					export MDLT_ORIGIN="$MMDAPP/.local"
				;;
			esac
			if [ ! -f "$MDLT_ORIGIN/myx/myx.distro-system/sh-lib/SystemContext.include" ] ; then
				echo "⛔ ERROR: SourceContext.SetInputSpec: can't find/detect origin, spec: $MDLT_CONSOLE_ORIGIN, origin: $MDLT_ORIGIN" >&2
				exit 1
			fi

			cd "$MMDAPP"
			export MMDAPP

			if [ "$1" == "--non-interactive" ] ; then
				shift
				{
					echo MDSC_ARGUMENTS="$@"
					echo ". '$MDLT_ORIGIN/myx/myx.distro-source/sh-lib/console-source-bashrc.rc'"
					cat
				} | bash -s
				exit 0
			fi
			
			export MDSC_ARGUMENTS="$@"
			bash --rcfile "$MDLT_ORIGIN/myx/myx.distro-source/sh-lib/console-source-bashrc.rc" -i
DISTROCONSOLE

		return 0
	;;
	## Synchronize-recover '.local/roots/*.distro-namespace' and 'source/*/repository.inf'
	--make-rebuild-repository-roots|--make-rebuild-namespace-roots)
		shift
		local MDSC_SOURCE="${MDSC_SOURCE:-"$MMDAPP/source"}"
		local MDSC_NSPACE="$MMDAPP/.local/roots"
		mkdir -p "$MDSC_NSPACE"
		local repositoryName repositoryRoot
		for repositoryFile in $( find "$MDSC_SOURCE" -mindepth 2 -maxdepth 2 -name repository.inf | sort ) ; do
			repositoryName="${repositoryFile#$MDSC_SOURCE/}"
			repositoryName="${repositoryName%/repository.inf}"
			repositoryRoot="$MDSC_NSPACE/$repositoryName.distro-namespace"
			[ -f "$repositoryRoot" ] || {
				echo "$MDSC_CMD: sync .local: ${repositoryRoot#$MMDAPP/}" >&2
				cp "$repositoryFile" "$repositoryRoot"
			}
		done
		for repositoryRoot in $( find "$MDSC_NSPACE" -mindepth 1 -maxdepth 1 -name '*.distro-namespace' | sort ) ; do
			repositoryName="${repositoryRoot#$MDSC_NSPACE/}"
			repositoryName="${repositoryName%.distro-namespace}"
			repositoryFile="$MDSC_SOURCE/$repositoryName/repository.inf"
			[ -f "$repositoryFile" ] || {
				echo "$MDSC_CMD: sync source: ${repositoryFile#$MMDAPP/}" >&2
				cp "$repositoryRoot" "$repositoryFile"
			}
		done
		return 0
	;;
	*)
		echo "⛔ ERROR: $MDSC_CMD: invalid option: $1" >&2
		set +e ; return 1
	;;
esac
