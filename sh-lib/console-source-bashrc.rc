#!/usr/bin/env bash
# ^^^ for syntax checking in the editor only

[ -z "$MDLT_ORIGIN" ] && echo "SourceConsole: Working in $MMDAPP" >&2
[ -f "$HOME/.bashrc" ] && . "$HOME/.bashrc" 

[ -z "MDSC_ARGUMENTS" ] || {
	set -- $MDSC_ARGUMENTS
	export MDSC_ARGUMENTS=""
}

. "${MDLT_ORIGIN:-$MMDAPP/.local}/myx/myx.distro-source/sh-lib/SourceContext.include"
DistroSystemContext --distro-from-source
# DistroSourceContext --distro-from-source
# DistroSourceContext --distro-path-auto

# export BASH_ENV="$MDLT_ORIGIN/myx/myx.distro-source/sh-lib/console-source-bashrc.rc"

if [ -x "$MDLT_ORIGIN/myx/myx.common/os-myx.common/host/tarball/bin/myx.common" ] ; then
	: ${MYXROOT:=$MDLT_ORIGIN/myx/myx.common/os-myx.common/host/tarball/share/myx.common}
	PATH="$MDLT_ORIGIN/myx/myx.common/os-myx.common/host/tarball/bin:$PATH"
fi

# add paths, replace if any
PATH=$(
  printf '%s:%s:%s:%s' \
    "${PATH//:$MDLT_ORIGIN\/myx\/myx.distro-*\/sh-scripts/}" \
    "$MDLT_ORIGIN/myx/myx.distro-source/sh-scripts" \
    "$MDLT_ORIGIN/myx/myx.distro-deploy/sh-scripts" \
    "$MDLT_ORIGIN/myx/myx.distro-.local/sh-scripts"
)

if ! type Deploy >/dev/null 2>&1 ; then
Deploy(){
	case "$1" in
		''|--*)
			( set -e ; . "$MDLT_ORIGIN/myx/myx.distro-deploy/sh-lib/DeployConsole.include" )
			return 0
		;;
	esac

	local distroCommand="$1" ; shift
	if ! type "${distroCommand%.fn.sh}" >/dev/null 2>&1 ; then
		if [ ! -f "$MDLT_ORIGIN/myx/myx.distro-deploy/sh-scripts/${distroCommand%.fn.sh}.fn.sh" ] ; then
			echo "⛔ ERROR: unknown command: ${distroCommand%.fn.sh}" >&2
			set +e ; return 1
		fi
		. "$MDLT_ORIGIN/myx/myx.distro-deploy/sh-scripts/${distroCommand%.fn.sh}.fn.sh"
	fi

	set +e ; "${distroCommand%.fn.sh}" "$@" || {
		EXITCODE=$?
		echo "⛔ ERROR: exited with error status ($EXITCODE)" >&2
		set +e ; return $EXITCODE
	}
	return 0
}
fi

if ! type Source >/dev/null 2>&1 ; then
Source(){
	case "$1" in
		''|--*)
			( set -e ; . "$MDLT_ORIGIN/myx/myx.distro-source/sh-lib/SourceConsole.include" )
			return 0
		;;
	esac

	local distroCommand="$1" ; shift
	if ! type "${distroCommand%.fn.sh}" >/dev/null 2>&1 ; then
		if [ ! -f "$MDLT_ORIGIN/myx/myx.distro-source/sh-scripts/${distroCommand%.fn.sh}.fn.sh" ] ; then
			echo "⛔ ERROR: unknown command: ${distroCommand%.fn.sh}" >&2
			set +e ; return 1
		fi
		. "$MDLT_ORIGIN/myx/myx.distro-source/sh-scripts/${distroCommand%.fn.sh}.fn.sh"
	fi

	set +e ; "${distroCommand%.fn.sh}" "$@" || {
		EXITCODE=$?
		echo "⛔ ERROR: exited with error status ($EXITCODE)" >&2
		set +e ; return $EXITCODE
	}
	return 0
}
fi

Help(){
	( . "$MDLT_ORIGIN/myx/myx.distro-source/sh-lib/help/HelpDistroSourceConsole.include" )
	set +e ; return 1
}

# ⚠️ Order matters in Bash 3.2: the wildcard ("*") registration must come before the specific (Distro) one, so that when you type:
#complete -W "Help Action Require Distro Deploy Source" \

#if complete -D &>/dev/null; then
#	complete -F Distro -D
#fi

complete -W "Help Require" \
         -o default -o filenames \
         "*"

for f in "$MDLT_ORIGIN"/myx/myx.distro-{source,deploy,remote,system,.local}/sh-scripts/*.fn.sh; do
  [ -x "$f" ] || continue
  complete -F Distro "$(basename "$f")"
done

complete -F Distro \
         -o nospace \
        "Action" "Require" "Remote" "Distro" "Deploy" "Source"

export LANG=en_US.UTF-8

PROMPT_COMMAND="set +e"
PS1="\` Source --shell-prompt \`: $PS1"

export PS1 PATH

if [ -n "$MDSC_PRJ_NAME" ] ; then
	# DistroSelectProject MDSC_PRJ_NAME "$MDSC_PRJ_NAME"
	export MDSC_SELECT_PROJECTS="$MDSC_PRJ_NAME"
	cd "$MMDAPP/source/$MDSC_PRJ_NAME"
	echo "Console: Project Selected: $MDSC_PRJ_NAME" >&2
fi
